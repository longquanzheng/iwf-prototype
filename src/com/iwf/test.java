/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package iwf.gen.api;

import iwf.gen.models.ErrorResponse;
import iwf.gen.models.WorkflowStartRequest;
import iwf.gen.models.WorkflowStartResponse;
import iwf.gen.models.WorkflowStateDecideRequest;
import iwf.gen.models.WorkflowStateDecideResponse;
import iwf.gen.models.WorkflowStateStartRequest;
import iwf.gen.models.WorkflowStateStartResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-27T15:11:26.859-07:00[America/Los_Angeles]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/workflow/start : for a workflow
     *
     * @param workflowStartRequest  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "apiV1WorkflowStartPost",
        summary = "for a workflow",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowStartResponse.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/workflow/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WorkflowStartResponse> apiV1WorkflowStartPost(
        @Parameter(name = "WorkflowStartRequest", description = "") @Valid @RequestBody(required = false) WorkflowStartRequest workflowStartRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"workflowRunId\" : \"workflowRunId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workflowState/decide : for invoking WorkflowState.decide API
     *
     * @param workflowStateDecideRequest  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "apiV1WorkflowStateDecidePost",
        summary = "for invoking WorkflowState.decide API",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowStateDecideResponse.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/workflowState/decide",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WorkflowStateDecideResponse> apiV1WorkflowStateDecidePost(
        @Parameter(name = "WorkflowStateDecideRequest", description = "") @Valid @RequestBody(required = false) WorkflowStateDecideRequest workflowStateDecideRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stateDecision\" : { \"upsertSearchAttributes\" : [ { \"valueType\" : \"KEYWORD\", \"value\" : \"value\", \"key\" : \"key\" }, { \"valueType\" : \"KEYWORD\", \"value\" : \"value\", \"key\" : \"key\" } ], \"nextStates\" : [ { \"nextStateInput\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"stateId\" : \"stateId\", \"nextStateOptions\" : { \"searchAttributesLoadingPolicy\" : { \"attributeLoadingType\" : \"LOAD_ALL_WITHOUT_LOCKING\", \"attributeKeys\" : [ \"attributeKeys\", \"attributeKeys\" ] }, \"commandCarryOverPolicy\" : { \"commandCarryOverType\" : \"NONE\" }, \"queryAttributesLoadingPolicy\" : { \"attributeLoadingType\" : \"LOAD_ALL_WITHOUT_LOCKING\", \"attributeKeys\" : [ \"attributeKeys\", \"attributeKeys\" ] } } }, { \"nextStateInput\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"stateId\" : \"stateId\", \"nextStateOptions\" : { \"searchAttributesLoadingPolicy\" : { \"attributeLoadingType\" : \"LOAD_ALL_WITHOUT_LOCKING\", \"attributeKeys\" : [ \"attributeKeys\", \"attributeKeys\" ] }, \"commandCarryOverPolicy\" : { \"commandCarryOverType\" : \"NONE\" }, \"queryAttributesLoadingPolicy\" : { \"attributeLoadingType\" : \"LOAD_ALL_WITHOUT_LOCKING\", \"attributeKeys\" : [ \"attributeKeys\", \"attributeKeys\" ] } } } ], \"upsertQueryAttributes\" : [ { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" }, { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" } ], \"waitForMoreCommandResults\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workflowState/start : for invoking WorkflowState.start API
     *
     * @param workflowStateStartRequest  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "apiV1WorkflowStateStartPost",
        summary = "for invoking WorkflowState.start API",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowStateStartResponse.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/workflowState/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WorkflowStateStartResponse> apiV1WorkflowStateStartPost(
        @Parameter(name = "WorkflowStateStartRequest", description = "") @Valid @RequestBody(required = false) WorkflowStateStartRequest workflowStateStartRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"upsertSearchAttributes\" : [ { \"valueType\" : \"KEYWORD\", \"value\" : \"value\", \"key\" : \"key\" }, { \"valueType\" : \"KEYWORD\", \"value\" : \"value\", \"key\" : \"key\" } ], \"upsertStateLocalAttributes\" : [ { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" }, { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" } ], \"commandRequest\" : { \"signalCommands\" : [ { \"signalName\" : \"signalName\", \"commandId\" : \"commandId\" }, { \"signalName\" : \"signalName\", \"commandId\" : \"commandId\" } ], \"timerCommands\" : [ { \"firingUnixTimestampSeconds\" : 6, \"commandId\" : \"commandId\" }, { \"firingUnixTimestampSeconds\" : 6, \"commandId\" : \"commandId\" } ], \"deciderTriggerType\" : \"ALL_COMMAND_COMPLETED\", \"activityCommands\" : [ { \"input\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"activityOptions\" : { \"startToCloseTimeoutSeconds\" : 0 }, \"activityType\" : \"activityType\", \"commandId\" : \"commandId\" }, { \"input\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"activityOptions\" : { \"startToCloseTimeoutSeconds\" : 0 }, \"activityType\" : \"activityType\", \"commandId\" : \"commandId\" } ] }, \"upsertQueryAttributes\" : [ { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" }, { \"value\" : { \"data\" : \"data\", \"encoding\" : \"JSON\" }, \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
